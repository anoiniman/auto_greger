in building primitives, our code is a bit wierd, and I don't know if we can readily take
more than 1 base in base_table right now, because of the none iterator, and maybe
even the standard iterator might have problems with that, just keep this in mind and if
it becomes a problem preemptively fix it

Enventually the print() function will be overloaded and the comms.robot_send function
will be changed so that they ignore things tagged with "debug", because, it actually
consumes quite a bit of power to both print characters and send characters through
the linked network so yeah

Última coisa a verificar na coisa das builds é ver se os special blocks estão a ser gravos
com sucesso, mas não duvido de tal

After some reading I've come to the conclusion that the cause of our power problems 
is in the print (statements) mainly (a lot of screen writing and refreshing, both in
previous text scrolling up and new one being written down) -- and secundarily in
sending network messages (they'll scale with large distances) -- a solution for the first
is re-directing global "print" into a no-op function, a solution for the second is simply
not sending messages (re-directing debug messages into no-op, transmitting only errors,
warnings and responses) and/or to batch them, cost scales with distance? Maybe Idk how
it workds for linked-cards.

found-it:
linked cards work as such:
-(packet.size / 32.0 
+ Settings.get.wirelessCostPerRange(Tier.Two) 
* Settings.get.maxWirelessRange(Tier.Two) * 5)

this is:
packet.size / 32.0 + 0.05 * 400 * 5
assuming a packet.size of 128:
4 + 100 = 104
a base cost of 100 power per message, fortunatly this cost doesn't vary with distance,
100 is very manageable, but it means that a fully charged robot can only send 200
messages before running out of battery, this compares with a move cost of 15, which is
8 times smaller, this means you can move 1600 blocks before running out of power.

This also means that our power issues come from printing and sending too many debug messages
this will be fixed!

Clear && do walls (6x6) space with (7x7) walls?
-> 7x7 space with 8x8 walls

-- ils transmissions and others of the sort should be batched for transmission
-- add option to ifs multiple steps in a row, at least during the first step
Write command that dry runs all primitives to check for dynamic errors
... all scripts ...
... all recipes ...
etc.

More debug prints in inventory, and add command that allows to turn off/on debug mode
build_road behaviour/instruction is necessary also <Maybe Done now?>

vvvvvvvvvv
Test if geolyzer scanning dir is relative to robot orientation, rather than coord abs
-- and -- write tool code, and of course, general inventory code after that


chunk_move improve the get_to_nearest algorithm for when we are inside buildings tehe
or just move towards the door first tehe
add flag to build/primitives called can_fail -> which means that if it fails to place
a block, or clear a block it will just continue going


have it be that when we switch to a different reasoning script we make sure that
the command queue is empty in relation to reasoning commands, prob. will be
guarenteed by the way scripts worky anyway, but we can never be sure,
act with intencionality

tool chest in crafting area


For now I won't do the force clear things, because, uhhhhh we can just fill everything
with air I guess

Add extra-chunk based information, so that chunks are marked as having a certain ore depostion, or
as impassible for navigation, we then need to update navigation in order to deal with these chunks
hopefully a dumb fix is enough

Add code that orders robot to build a sort of "covering" over a specified hole useful to safe
le command known as chunk_move("surface")

Temp Bridging algorithm as a movement "mode"/"what"

Besides the "force-update all inventory" command add a "force-update these slots" command
Use "change_orientation" (not set) in order to orient stairs in the x-z axis, and use side of up/down
MetaScript, make the stepping of a goal calculate the requirements, both for items and buildings
also, to calculate the buildings requirements simple add a dry-mode to the do_build thingy mabob
accessing/creating a temp SchematicInterface directly and summing up the calculated blocks, and then
looking up how to obtain these blocks in a recursive manner

checks in recipes when output is a table or a simple string

add variation to chunk move that places blocks in the walls so that it may climb :)
Use OOS to aura farm

Tests to run:
> build road
<DONE> > navigate door ------- Support doors that are not in 0x/0z :)
> build hole_home (filled with air)
> gathering scripts
> making sure internal inventory gets updated currectly (do some introspection)

<DONE-ish> UNLOCK "FRAME-RATE" PLZ
<DONE> Add bridge nav to nav_interface, should be relatively easy to implement <wasn't that easy>
<DONE> Add the improved move algorithms
<On It> Add recipe resolution
<DUSTED> Connect the the gatherting test script up

FIND A WAY TO GET THE SUCK UPGRADE ON; OTHERWISE gathering saplings WILL BE DIFFICULT

Writing to Disk (prob easy)
<DONE> Slightly Improved Navigation
Test our clay gathering script
Tree-Scanning gathering + (suck)
Tree-GROWING gathering
Mineral MINING
LAVA GATHERING
Storage
Crafting
GG

Make the robot auto-break textile gardens? It will be necessary, and maybe grain + soy gardens?
<TEST> Add interactive to gathering01 so that it doesn't block as hard as it does (prio = -2 and all that shi)
Add manual testing of the special moves?

<TEST> Add the basic material-bill obtain function to reasoning about buildings, and maybe eventually dry-run mode for building?
Over y height just dig throught he mountain, lol?

SR-latchify the reasoning contraints
